import casadi as ca
import numpy as np

# 1. 参数与符号变量
m1, m2, R, l, r, g = 5.269, 3.0, 0.255, 0.174, 0.110, 9.81  # 质量、几何参数
nx, nu = 4, 2  # 状态维度 [a, j, a_dot, j_dot]，控制维度 [t1, t2]
N = 20         # MPC 预测步长
dt = 0.05      # 离散步长

# CasADi 符号
x = ca.MX.sym('x', nx)    # x = [a, j, a_dot, j_dot]
u = ca.MX.sym('u', nu)    # u = [t1, t2]
# 估计参数（例如 m2 未知，需要在线估计）
theta = ca.MX.sym('theta', 1)

# 2. 连续动力学 (参考式 (8) 形式化)
#  M(q)*ddq + C(q,dq) = E*u  =>  ddq = M^{-1}(E*u - C)
a, j, adot, jdot = x[0], x[1], x[2], x[3]
t1, t2 = u[0], u[1]

# 构造 M(q) 和 C(q,dq)（简化示例，只保留对 a_ddot 的影响项）
M11 = theta[0]*l**2 + r**2 + I2    # I2 可吸收到 theta 中
M12 = ...  # 根据模型填入
C1  = ...  # 根据模型填入重力+科里奥利项

# 这里只示例摆轮角加速度 a_ddot，自行补充 j_ddot
a_ddot = (t1 - C1) / M11

# 构建连续系统
f = ca.vertcat(adot,
               jdot,
               a_ddot,
               # j_ddot 类似构建
               ca.MX.zeros(1))

# 3. 离散化 (Euler)
x_next = x + dt * f
F = ca.Function('F', [x, u, theta], [x_next])

# 4. 构建 MPC 优化器
opti = ca.Opti()
X = opti.variable(nx, N+1)
U = opti.variable(nu, N)
Theta = opti.parameter(1)   # 线上估计参数

# 初始条件与参数绑定
X0 = opti.parameter(nx)
opti.set_value(X0, np.zeros(nx))
opti.set_value(Theta, np.array([m2]))  # 初始估计

# 目标轨迹（示例：保持 a=j=0）
x_ref = np.zeros(nx)

# 构造目标函数与约束
obj = 0
Q = np.diag([10,10,1,1])
Rmat = np.diag([0.1,0.1])
for k in range(N):
    obj += ca.mtimes([(X[:,k]-x_ref).T, Q, (X[:,k]-x_ref)]) \
         + ca.mtimes([U[:,k].T, Rmat, U[:,k]])
    opti.subject_to(X[:,k+1] == F(X[:,k], U[:,k], Theta))

# 控制 & 状态约束
u_max = 5.0
opti.subject_to(opti.bounded(-u_max, U, u_max))
opti.subject_to(opti.bounded(-np.pi/4, X[0:2,:], np.pi/4))

# 初始状态约束
opti.subject_to(X[:,0] == X0)
opti.minimize(obj)
opts = {"ipopt.print_level":0, "print_time":0}
opti.solver('ipopt', opts)

# 5. 在线自适应 + MPC 主循环
x_curr = np.zeros(nx)
theta_est = m2*0.8  # 初始估计偏差
P = 10.0           # RLS 增益示例

for t in range(200):
    # 5.1 参数估计（简单 RLS 更新示例）
    # 观测 a_ddot_exp = (x_curr[2] - x_prev[2]) / dt
    # 及模型预测项 phi = ...
    # theta_est = theta_est + P * phi * (a_ddot_exp - phi*theta_est) / (1 + P * phi**2)

    # 5.2 求解 MPC
    opti.set_value(X0, x_curr)
    opti.set_value(Theta, np.array([theta_est]))
    sol = opti.solve()
    u_opt = sol.value(U[:,0])

    # 5.3 执行控制 & 状态更新（仿真）
    x_curr = F(x_curr, u_opt, theta_est).full().flatten()

    # 打印
    print(f"Step {t}, state: {x_curr}, control: {u_opt}, theta: {theta_est:.3f}")

